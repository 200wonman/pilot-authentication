spring:
  jpa:
    hibernate:
      ddl-auto: update
#      create 옵션:
#      무엇을 하는가?: 애플리케이션 시작 시마다 새로운 데이터베이스 스키마를 생성합니다.
#      왜 사용하는가?: 초기 개발 단계에서 모델 변경이 빈번할 때 유용합니다.
#      단점: 기존 데이터를 모두 삭제합니다, 운영 환경에서는 사용하지 않는 것이 좋습니다.
#      update 옵션:
#      무엇을 하는가?: 애플리케이션 시작 시 데이터베이스 스키마를 업데이트합니다.
#      왜 사용하는가?: 개발이 어느 정도 진행된 후 기존 데이터를 유지하면서 모델의 변경사항을 반영하고 싶을 때 유용합니다.
#      단점: 복잡한 스키마 변경을 처리하지 못할 수도 있습니다.
#      전환 이유:
#      초기 개발 단계(create): 빠른 변화와 실험을 위해 매번 새로운 스키마로 시작합니다.
#      개발 안정화 단계(update): 안정화되어 가면서 기존 데이터를 유지하고, 점진적인 스키마 변경을 반영할 필요가 있을 때 전환합니다.
#      실제 운영 환경에서는 ddl-auto 설정을 none으로 함.
#      그밖에 DB스키마와 엔티클래스와 일치하는지 확인하는 validate
#      애플리케이션 시작시 스키마를 생성하, 애플리케이션 종료시 해당스키마를 삭제하는 create-drop
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${CLIENT_ID}
            client-secret: ${CLIENT_SECRET}
            scope:
              - email
              - profile
  h2:
    console:
      enabled: true # /h2-console 설정
      path: /h2-console
  datasource:
    url: jdbc:h2:mem:bottle_kill # 메모리 H2 DB 경로 설정
